name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/task-api
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/testdb
          PORT: 3000

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy with Docker
        run: |
          # Pull the latest image
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

          # Run the application container
          docker run -d \
            --name task-api \
            -p 3000:3000 \
            -e MONGODB_URI=mongodb://172.17.0.1:27017/taskdb \
            -e PORT=3000 \
            --network host \
            ${{ env.DOCKER_IMAGE_NAME }}:latest

          # Wait for application to be healthy
          echo "Waiting for application to start..."
          sleep 15

          # Check if container is running
          docker ps -a

      - name: Verify deployment
        run: |
          echo "Testing health endpoint..."
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3000/health; then
              echo "‚úÖ Deployment successful! Application is healthy."
              exit 0
            fi
            echo "Attempt $attempt/$max_attempts failed. Retrying in 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          done

          echo "‚ùå Deployment verification failed after $max_attempts attempts"
          docker-compose logs
          exit 1

      - name: Display application info
        if: success()
        run: |
          echo "üöÄ Application deployed successfully!"
          echo "üìç Health endpoint: http://localhost:3000/health"
          echo "üìç API endpoint: http://localhost:3000/api/tasks"
          echo "üê≥ Docker image: ${{ env.DOCKER_IMAGE_NAME }}:latest"
